@page "/home"
@using Frontend.Services
@using Frontend.Models
@inject WeatherServices WeatherServices
@inject FavouriteCityAddService FavouriteCityAddService
@inject UserSessionService session
@rendermode InteractiveServer

<MudLayout>
    <NavBar />
    <MudMainContent>
        <div class="container mt-5">
            <!-- Weather Card -->
            <div class="card text-white" style="background-image: url('/images/mountain.jpeg'); background-size: cover; background-position: center; border-radius: 20px; overflow: hidden;">
                <div style="background-color: rgba(0, 0, 50, 0.6); padding: 30px; position: relative;">

                    <!-- Location with Icon and Glass Effect -->
                    <div style="
                        position: absolute;
                        top: 30px;
                        right: 30px;
                        background: rgba(255, 255, 255, 0.15);
                        backdrop-filter: blur(10px);
                        padding: 8px 16px;
                        border-radius: 12px;
                        display: flex;
                        align-items: center;
                        font-size: 14px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="white" class="me-2" viewBox="0 0 16 16">
                            <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z" />
                        </svg>
                        <span>@city</span>
                    </div>

                    <!-- Greeting + Time -->
                    <div class="d-flex flex-column">
                        <h4>Good Morning, John</h4>
                        <h1 style="font-size: 48px; font-weight: bold;">@currentTime</h1>
                        <p style="font-size: 14px;">@currentDate</p>
                    </div>

                    <!-- Weather Forecast Details -->
                    @if (weatherData != null)
                    {
                        <div class="d-flex justify-content-between align-items-center mt-4">
                            <div>
                                <h5>Weather Forecast</h5>
                                <p style="font-size: 20px; font-weight: bold;">@weatherCondition</p>
                                <p style="font-size: 14px;">@description</p>
                                <p style="font-size: 16px;">🌡 Temp: @weatherData.Main.Temp &deg;C</p>
                                <p style="font-size: 16px;">💧 Humidity: @weatherData.Main.Humidity%</p>
                            </div>
                            <img src="/images/mountain.jpeg" alt="Weather Icon" style="width: 60px; height: 60px; border-radius: 8px;">
                        </div>
                    }

                    <!-- Popup Notification -->
                    @if (showPopup)
                    {
                        <div style="
                            position: absolute;
                            top: 20px;
                            right: 20px;
                            background: rgba(255, 255, 255, 0.15);
                            backdrop-filter: blur(10px);
                            padding: 12px 20px;
                            color: white;
                            border-radius: 12px;
                            font-weight: 500;
                            z-index: 1000;">
                            @statusMessage
                        </div>
                    }
                </div>
            </div>

            <!-- Search Box -->
            <div class="mt-4 d-flex justify-content-center">
                <div style="
                    background: rgba(255, 255, 255, 0.15);
                    backdrop-filter: blur(10px);
                    padding: 12px 20px;
                    border-radius: 20px;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    max-width: 500px;
                    width: 100%;">
                    <input class="form-control border-0"
                           style="flex: 1; background: transparent; color: black; outline: none;"
                           placeholder="Enter a city"
                           @bind="searchCity" />

                    <button class="btn text-white" style="background-color: #6366F1;" @onclick="SearchWeather">Search</button>
                </div>
            </div>

            <!-- Save City Button -->
            @if (weatherData != null)
            {
                <div class="mt-3 text-center position-relative">
                    <button class="btn text-white"
                            style="background: rgba(99, 102, 241, 0.8); border: none; padding: 10px 20px; border-radius: 8px;"
                            @onclick="PostCity">
                        Save this city
                    </button>
                </div>
            }
        </div>
      
    </MudMainContent>
</MudLayout>

@code {
    private WeatherData? weatherData;
    private string city = "Rajshahi, Bangladesh";
    private string weatherCondition = "Partly Cloudy";
    private string description = "Isolated thunderstorms, Precipitation: 30%";
    private string currentTime = DateTime.Now.ToString("hh:mm tt");
    private string currentDate = DateTime.Now.ToString("dddd, MMMM dd | hh:mm tt");
    private string searchCity = "";
    private string statusMessage = "";
    private bool showPopup = false;

    private async Task SearchWeather()
    {
        if (!string.IsNullOrWhiteSpace(searchCity))
        {
            city = searchCity;
            await GetWeather();
        }
    }

    private async Task GetWeather()
    {
        try
        {
            weatherData = await WeatherServices.GetWeatherData(city);

            if (weatherData != null)
            {
                weatherCondition = weatherData.Weather.FirstOrDefault()?.Main ?? "Clear";
                description = weatherData.Weather.FirstOrDefault()?.Description ?? "No details available";
                currentTime = DateTime.Now.ToString("hh:mm tt");
                currentDate = DateTime.Now.ToString("dddd, MMMM dd | hh:mm tt");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task PostCity()
    {
        if (!string.IsNullOrEmpty(session.AccessToken))
        {
            statusMessage = await FavouriteCityAddService.AddFavouriteCity(city, session.AccessToken);
        }
        else
        {
            statusMessage = "User is not authenticated.";
        }

        showPopup = true;
        StateHasChanged();
        await Task.Delay(3000);
        showPopup = false;
        StateHasChanged();
    }
}
