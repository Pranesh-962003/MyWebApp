@page "/favorites"
@using Frontend.Models
@using Frontend.Services
@inject HttpClient Http
@inject WeatherServices WeatherService
@inject UserSessionService Session
@using System.Text.Json.Serialization

<MudLayout>
    <NavBar />
    <MudMainContent Class="pa-4">
        <h3>Your Favorite Cities</h3>

        @if (!Session.IsLoggedIn)
        {
            <MudText Color="Color.Error">Please log in to view your favorite cities.</MudText>
        }
        else if (isLoadingCities)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <p>Loading favorite cities...</p>
        }
        else if (cities is null || cities.Count == 0)
        {
            <p>No favorite cities found.</p>
        }
        else
        {
            <MudTable Items="weatherDataList" Bordered="true" Striped="true" Hover="true">
                <HeaderContent>
                    <MudTh>City</MudTh>
                    <MudTh>Temperature (°C)</MudTh>
                    <MudTh>Feels Like (°C)</MudTh>
                    <MudTh>Humidity (%)</MudTh>
                    <MudTh>Weather</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.Main.Temp</MudTd>
                    <MudTd>@context.Main.FeelsLike</MudTd>
                    <MudTd>@context.Main.Humidity</MudTd>
                    <MudTd>@(context.Weather.FirstOrDefault()?.Description ?? "N/A")</MudTd>
                </RowTemplate>
            </MudTable>

            @if (isLoadingWeather)
            {
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                <p>Fetching weather data...</p>
            }
        }
    </MudMainContent>
</MudLayout>

@code {
    private List<FavoriteCity>? cities;
    private List<WeatherData> weatherDataList = new();
    private bool isLoadingCities = true;
    private bool isLoadingWeather = false;

    protected override async Task OnInitializedAsync()
    {
        if (!Session.IsLoggedIn)
        {
            isLoadingCities = false;
            return;
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiConstants.BaseUrl}/favoriteCity/list");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Session.AccessToken);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                cities = await response.Content.ReadFromJsonAsync<List<FavoriteCity>>();
                cities?.Reverse();
            }
            else
            {
                Console.WriteLine("Failed to load favorite cities from backend.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Unexpected error loading cities: " + ex.Message);
        }

        isLoadingCities = false;

        if (cities != null && cities.Count > 0)
        {
            isLoadingWeather = true;

            var weatherTasks = new List<Task>();

            foreach (var city in cities)
            {
                var trimmedCity = city.CityName?.Trim();
                if (!string.IsNullOrWhiteSpace(trimmedCity))
                {
                    weatherTasks.Add(LoadWeatherAsync(trimmedCity));
                }
            }

            await Task.WhenAll(weatherTasks);
            isLoadingWeather = false;
        }
    }

    private async Task LoadWeatherAsync(string cityName)
    {
        try
        {
            var weather = await WeatherService.GetWeatherData(cityName);
            if (weather != null)
            {
                weatherDataList.Add(weather);
                await InvokeAsync(StateHasChanged); // update UI as each city is loaded
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to fetch weather for {cityName}: {ex.Message}");
        }
    }

    public class FavoriteCity
    {
        [JsonPropertyName("city_name")]
        public string? CityName { get; set; }
    }
}
