@page "/"
@using Frontend.Services
@inject HttpClient Http
@inject UserSessionService Session
@inject NavigationManager Nav
@rendermode InteractiveServer

<PageTitle>Login page</PageTitle>

<MudPaper Class="min-vh-100">

    <!-- This sets height to 100vh -->
    <div class="d-flex justify-content-between align-items-stretch w-100 h-100">

        <!-- Left Section -->
        <div class="d-flex flex-column align-items-center justify-content-center" style="height: 100vh; width: 50%; margin-left:30px">

            <div class="px-4 d-flex flex-column align-items-center justify-content-center" style="width: 600px; margin-top: 5rem ; height:80%; border-radius:5px">
                <MudText style="margin-top:100px; font-weight:600" Typo="Typo.h4">Wecome back</MudText>

                <div class="w-100 h-100 ">
                    <label class="fs-6">Email</label>
                    <input type="email" name="name"
                    @bind="email"
                    class="w-100 form-control"
                    style=" color: white;" />

                    <label class="fs-6 mt-3">Password</label>
                    <input type="password" name="password"
                    @bind="password"
                    class="w-100 form-control"
                    style=" color: white;" />


                    <MudButton OnClick="LoginAsync" Disabled="@isLogging" style="width:100% ; background-color:#8B5CF6 !important; margin-top:30px; padding:10px; color:white ; border-radius:5px">
                        @if (isLogging)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2 "   />
                            @:Logging in...
                            }
                        else
                        {
                            @:Login
                            }
                    </MudButton>
                    <div class="d-flex p-2 gap-1 mt-2">
                        <MudText style="font-size:15px;">New to Application Click here</MudText>
                        <MudLink Href="/register">Registration </MudLink>
                    </div>
                </div>
                
            </div>
        </div>

        <!-- Right Section -->
        <div class="d-flex flex-column align-items-center justify-content-start" style="height: 100vh; width: 50%;">
            <div class="px-4 text-center d-flex flex-column align-items-center" style="max-width: 500px; margin-top: 5rem ; background-color:#8B5CF6; height:80%; border-radius:5px">
                <MudText Typo="Typo.h4" class="mt-5 text-white text-start">🌤️ Welcome to WeatherInfo!</MudText>
                <p class="text-white text-sm-start mt-5">
                    Stay prepared with real-time weather updates, forecasts, and your favorite locations—all in one place.
                    Log in to explore personalized weather insights tailored just for you.
                    Whether it’s sunshine or storms, we’ve got you covered!
                </p>
                <MudImage Src="Images/BackroundLogin.webp" Style="height:390px; width:99%; border-radius:7px;"/>
            </div>

        </div>

    </div>
</MudPaper>

@* <MudImage Src="Images/BackroundLogin.webp" Style="height: 90vh; width: 90%; object-fit: cover; border-radius:30px" Class=" shadow" /> *@
@* <h3>Login</h3> *@

@* <input @bind="email" placeholder="Email" /> *@
@* <input @bind="password" type="password" placeholder="Password" /> *@
@* <button @onclick="LoginAsync">Login</button> *@

@if (!string.IsNullOrEmpty(error))
{
    <p style="color: red;">@error</p>
}

@code {
    string? email, password, error;

    bool isLogging = false;

    async Task LoginAsync()
    {
        isLogging = true;
        var content = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("email", email ?? ""),
            new KeyValuePair<string, string>("password", password ?? "")
        });

        var response = await Http.PostAsync("https://localhost:7224/api/my/login", content);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadFromJsonAsync<TokenResponse>();
            Console.WriteLine(json + "Token as json");
            if (json is not null && !string.IsNullOrEmpty(json.Token))
            {
                isLogging = false;
                Session.SetToken(json.Token);
                
                Nav.NavigateTo("/home");
            }
            else
            {
                error = "Invalid token received.";
            }
        }
        else
        {
            error = "Invalid credentials.";
        }
    }

    class TokenResponse
    {
        public string? Token { get; set; }
    }
}
